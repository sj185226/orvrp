package com.example.orvrp;

import com.google.ortools.Loader;
import com.google.ortools.constraintsolver.*;

import java.util.logging.Logger;

public class SimpleRouting {

  // [START data_model]
  private static final Logger logger = Logger.getLogger(SimpleRouting.class.getName());

  // [START data_model]
  static class DataModel {
    public final double[][] distanceMatrix = {
            { 0.0, 40.854, 50.309, 86.626, 47.577, 100.37, 65.514, 102.745, 41.66, 0.484, 53.819, 100.16, 98.898,
                    54.361, 31.531, 60.61, 106.629, 156.005, 112.065, 187.75, 52.165, 77.587, 0.478, 152.776,
                    154.959, 154.825, 144.192, 117.024, 139.032, 1.638, 106.124 },
            { 40.922, 0.0, 11.21, 110.532, 24.058, 124.276, 89.42, 126.651, 18.141, 40.578, 14.45, 124.066, 122.804,
                    88.477, 9.248, 100.649, 140.745, 179.911, 135.971, 211.656, 12.774, 117.626, 40.988, 113.677,
                    131.44, 131.306, 184.231, 157.063, 173.148, 42.012, 130.03 },
            { 50.94, 11.448, 0.0, 120.55, 18.192, 134.294, 99.438, 136.669, 18.933, 50.596, 2.53, 134.084, 132.822,
                    98.495, 23.12, 110.667, 150.763, 189.929, 145.989, 221.674, 1.442, 127.644, 51.006, 104.974,
                    125.574, 125.44, 194.249, 167.081, 183.166, 52.03, 140.048 },
            { 86.6, 110.554, 120.009, 0.0, 117.277, 27.606, 131.136, 29.981, 111.36, 86.073, 123.519, 27.396,
                    26.134, 141.21, 101.231, 142.048, 193.478, 155.516, 97.824, 187.261, 121.865, 89.583, 87.172,
                    222.476, 191.146, 224.525, 100.227, 179.577, 225.881, 87.885, 33.36 },
            { 47.439, 23.06, 17.955, 117.049, 0.0, 130.793, 95.937, 133.168, 15.432, 47.095, 14.649, 130.583,
                    129.321, 94.994, 19.619, 107.166, 147.262, 186.428, 142.488, 218.173, 14.42, 124.143, 47.505,
                    120.422, 109.042, 108.908, 190.748, 163.58, 179.665, 48.529, 136.547 },
            { 100.626, 124.58, 134.035, 27.888, 131.303, 0.0, 128.134, 1.911, 125.386, 100.099, 137.545, 1.283,
                    2.989, 155.236, 115.257, 156.074, 207.504, 137.442, 79.75, 169.187, 135.891, 76.067, 101.198,
                    236.502, 173.072, 223.287, 75.99, 166.061, 237.732, 101.911, 19.844 },
            { 65.672, 89.626, 99.081, 131.003, 96.349, 128.281, 0.0, 129.019, 90.432, 65.145, 102.591, 128.103,
                    143.275, 120.282, 80.303, 121.12, 172.55, 92.856, 48.916, 124.601, 100.937, 138.097, 66.244,
                    201.548, 128.486, 178.701, 191.11, 177.534, 204.953, 66.957, 150.501 },
            { 102.624, 126.578, 136.033, 29.886, 133.301, 1.8, 128.823, 0.0, 127.384, 102.097, 139.543, 2.577,
                    4.062, 157.234, 117.255, 158.072, 209.502, 138.131, 80.439, 169.876, 137.889, 78.065, 103.196,
                    238.5, 173.761, 223.976, 76.396, 168.059, 239.73, 103.909, 21.842 },
            { 41.616, 19.327, 18.369, 111.226, 15.637, 124.97, 90.114, 127.345, 0.0, 41.272, 21.879, 124.76,
                    123.498, 89.171, 13.796, 101.343, 141.439, 180.605, 136.665, 212.35, 20.225, 118.32, 41.682,
                    120.836, 123.019, 122.885, 184.925, 157.757, 173.842, 42.706, 130.724 },
            { 0.75, 40.593, 50.048, 86.143, 47.316, 99.887, 65.031, 102.262, 41.399, 0.0, 53.558, 99.677, 98.415,
                    54.1, 31.27, 60.937, 106.368, 155.522, 111.582, 187.267, 51.904, 77.914, 0.816, 152.515,
                    154.698, 154.564, 144.519, 117.351, 138.771, 1.982, 105.641 },
            { 53.907, 14.854, 3.538, 123.517, 15.003, 137.261, 102.405, 139.636, 21.9, 53.563, 0.0, 137.051,
                    135.789, 101.462, 26.087, 113.634, 153.73, 192.896, 148.956, 224.641, 1.611, 130.611, 53.973,
                    105.65, 122.385, 122.251, 197.216, 170.048, 186.133, 54.997, 143.015 },
            { 98.985, 122.939, 132.394, 26.247, 129.662, 1.254, 127.958, 2.906, 123.745, 98.458, 135.904, 0.0,
                    2.782, 153.595, 113.616, 154.433, 205.863, 137.266, 79.574, 169.011, 134.25, 74.426, 99.557,
                    234.861, 172.896, 223.111, 76.875, 164.42, 236.091, 100.27, 18.203 },
            { 98.925, 122.879, 132.334, 26.187, 129.602, 2.727, 143.461, 4.394, 123.685, 98.398, 135.844, 2.517,
                    0.0, 153.535, 113.556, 154.373, 205.803, 142.964, 85.272, 174.709, 134.19, 74.366, 99.497,
                    234.801, 178.594, 228.809, 74.64, 164.36, 236.031, 100.21, 18.143 },
            { 54.272, 88.242, 97.697, 141.384, 94.965, 155.128, 120.272, 157.503, 89.048, 53.928, 101.207, 154.918,
                    153.656, 0.0, 78.919, 55.872, 55.125, 210.763, 166.823, 242.508, 99.553, 131.931, 54.338,
                    174.013, 202.347, 202.213, 198.536, 156.325, 87.528, 53.713, 160.882 },
            { 31.557, 9.83, 22.485, 101.167, 19.753, 114.911, 80.055, 117.286, 13.836, 31.213, 25.995, 114.701,
                    113.439, 79.112, 0.0, 91.284, 131.38, 170.546, 126.606, 202.291, 24.341, 108.261, 31.623,
                    124.952, 127.135, 127.001, 174.866, 147.698, 163.783, 32.647, 120.665 },
            { 60.721, 100.33, 109.785, 142.024, 107.053, 155.768, 120.912, 158.143, 101.136, 60.779, 113.295,
                    155.558, 154.296, 55.84, 91.007, 0.0, 105.596, 211.403, 167.463, 243.148, 111.641, 61.098,
                    60.383, 212.252, 214.435, 214.301, 131.349, 59.83, 131.501, 61.096, 117.07 },
            { 106.46, 140.43, 149.885, 193.572, 147.153, 207.316, 172.46, 209.691, 141.236, 106.116, 153.395,
                    207.106, 205.844, 54.787, 131.107, 105.29, 0.0, 262.951, 219.011, 294.696, 151.741, 184.119,
                    106.526, 119.067, 254.535, 254.401, 250.724, 125.66, 56.863, 105.901, 213.07 },
            { 156.021, 179.975, 189.43, 155.457, 186.698, 137.03, 92.729, 137.768, 180.781, 155.494, 192.94,
                    136.852, 142.322, 210.631, 170.652, 211.469, 262.899, 0.0, 57.665, 36.549, 191.286, 205.771,
                    156.593, 291.897, 137.667, 187.882, 199.859, 267.883, 295.302, 157.306, 149.548 },
            { 109.748, 133.702, 143.157, 98.115, 140.425, 79.688, 46.456, 80.426, 134.508, 109.221, 146.667, 79.51,
                    84.98, 164.358, 124.379, 165.196, 216.626, 58.009, 0.0, 89.754, 145.013, 148.429, 110.32,
                    245.624, 93.639, 143.854, 142.517, 221.61, 249.029, 111.033, 92.206 },
            { 188.046, 212.0, 221.455, 187.482, 218.723, 169.055, 124.754, 169.793, 212.806, 187.519, 224.965,
                    168.877, 174.347, 242.656, 202.677, 243.494, 294.924, 36.56, 89.69, 0.0, 223.311, 237.796,
                    188.618, 323.922, 169.692, 219.907, 231.884, 299.908, 327.327, 189.331, 181.573 },
            { 52.019, 12.527, 1.503, 121.629, 19.271, 135.373, 100.517, 137.748, 20.012, 51.675, 1.471, 135.163,
                    133.901, 99.574, 24.199, 111.746, 151.842, 191.008, 147.068, 222.753, 0.0, 128.723, 52.085,
                    105.867, 126.653, 126.519, 195.328, 168.16, 184.245, 53.109, 141.127 },
            { 78.345, 117.954, 127.409, 89.062, 124.677, 76.393, 138.536, 78.768, 118.76, 78.403, 130.919, 76.183,
                    74.921, 132.451, 108.631, 61.673, 184.719, 205.839, 148.147, 237.584, 129.265, 0.0, 78.007,
                    229.876, 232.059, 231.925, 70.269, 91.344, 163.015, 78.72, 55.99 },
            { 0.335, 40.78, 50.235, 86.962, 47.503, 100.706, 65.85, 103.081, 41.586, 0.815, 53.745, 100.496, 99.234,
                    54.287, 31.457, 60.939, 106.555, 156.341, 112.401, 188.086, 52.091, 77.916, 0.0, 152.702,
                    154.885, 154.751, 144.521, 117.353, 138.958, 1.157, 106.46 },
            { 154.095, 115.042, 105.821, 223.705, 121.347, 237.449, 202.593, 239.824, 122.088, 153.751, 107.304,
                    237.239, 235.977, 173.494, 126.275, 213.822, 119.11, 293.084, 249.144, 324.829, 106.871,
                    230.799, 154.161, 0.0, 223.799, 166.349, 297.404, 223.797, 146.017, 155.185, 243.203 },
            { 155.264, 130.885, 125.78, 191.736, 109.08, 173.309, 129.008, 174.047, 123.257, 154.92, 122.474,
                    173.131, 178.601, 202.819, 127.444, 214.991, 255.087, 137.884, 93.944, 169.629, 122.245,
                    231.968, 155.33, 224.202, 0.0, 59.54, 236.138, 271.405, 287.49, 156.354, 185.827 },
            { 154.786, 130.407, 125.302, 224.396, 108.602, 223.03, 178.729, 223.768, 122.779, 154.442, 121.996,
                    222.852, 228.322, 202.341, 126.966, 214.513, 254.609, 187.605, 143.665, 219.35, 121.767, 231.49,
                    154.852, 166.6, 58.934, 0.0, 285.859, 270.927, 287.012, 155.876, 235.548 },
            { 144.982, 184.591, 194.046, 101.112, 191.314, 77.239, 191.903, 77.631, 185.397, 145.04, 197.556,
                    77.442, 75.288, 199.088, 175.268, 131.798, 251.356, 201.211, 143.519, 232.956, 195.902, 70.731,
                    144.644, 296.513, 236.841, 287.056, 0.0, 160.725, 232.396, 145.357, 101.265 },
            { 116.525, 156.134, 165.589, 178.67, 162.857, 166.001, 176.716, 168.376, 156.94, 116.583, 169.099,
                    165.791, 164.529, 156.688, 146.811, 59.164, 126.151, 267.207, 223.267, 298.952, 167.445, 90.926,
                    116.187, 224.402, 270.239, 270.105, 159.877, 0.0, 80.211, 116.9, 145.598 },
            { 139.227, 173.197, 182.652, 226.339, 179.92, 238.464, 205.227, 240.839, 174.003, 138.883, 186.162,
                    238.254, 236.992, 87.554, 163.874, 131.627, 57.017, 295.718, 251.778, 327.463, 184.508, 163.389,
                    139.293, 146.012, 287.302, 287.168, 232.34, 80.294, 0.0, 138.668, 218.061 },
            { 1.293, 41.727, 51.182, 87.888, 48.45, 101.632, 66.776, 104.007, 42.533, 1.775, 54.692, 101.422,
                    100.16, 55.234, 32.404, 60.113, 107.502, 157.267, 113.327, 189.012, 53.038, 77.09, 1.368,
                    153.649, 155.832, 155.698, 143.695, 116.527, 139.905, 0.0, 107.386 },
            { 105.809, 129.763, 139.218, 33.071, 136.486, 20.402, 150.345, 22.777, 130.569, 105.282, 142.728,
                    20.192, 18.93, 160.419, 120.44, 117.289, 212.687, 149.848, 92.156, 181.593, 141.074, 56.222,
                    106.381, 241.685, 185.478, 235.693, 100.645, 146.216, 217.887, 107.094, 0.0 }
    };
    public final int vehicleNumber = 7;
    public final int depot = 0;
  }
  // [END data_model]

  // [START solution_printer]
  /// @brief Print the solution.
  static void printSolution(
          DataModel data, RoutingModel routing, RoutingIndexManager manager, Assignment solution) {
    // Solution cost.
    logger.info("Objective : " + solution.objectiveValue());
    // Inspect solution.
    long totalDistance = 0;
    for (int i = 0; i < data.vehicleNumber; ++i) {
      logger.info("Route for Vehicle " + i + ":");
      long routeDistance = 0;
      String route = "";
      long index = routing.start(i);
      while (!routing.isEnd(index)) {
        route += manager.indexToNode(index) + " -> ";
        long previousIndex = index;
        index = solution.value(routing.nextVar(index));
        routeDistance += routing.getArcCostForVehicle(previousIndex, index, i);
      }
      route += manager.indexToNode(routing.end(i));
      logger.info(route);
      logger.info("Distance of the route: " + routeDistance + "m");
      totalDistance += routeDistance;
    }
    logger.info("Total Distance of all routes: " + totalDistance + "m");
  }
  // [END solution_printer]

  public static void main(String[] args) throws Exception {
    Loader.loadNativeLibraries();
    // Instantiate the data problem.
    // [START data]
    final DataModel data = new DataModel();
    // [END data]

    // Create Routing Index Manager
    // [START index_manager]
    RoutingIndexManager manager =
            new RoutingIndexManager(data.distanceMatrix.length, data.vehicleNumber, data.depot);
    // [END index_manager]

    // Create Routing Model.
    // [START routing_model]
    RoutingModel routing = new RoutingModel(manager);
    // [END routing_model]

    // Create and register a transit callback.
    // [START transit_callback]
    final int transitCallbackIndex =
            routing.registerTransitCallback((long fromIndex, long toIndex) -> {
              // Convert from routing variable Index to user NodeIndex.
              int fromNode = manager.indexToNode(fromIndex);
              int toNode = manager.indexToNode(toIndex);
              return (long) data.distanceMatrix[fromNode][toNode];
            });
    // [END transit_callback]

    // Define cost of each arc.
    // [START arc_cost]
    routing.setArcCostEvaluatorOfAllVehicles(transitCallbackIndex);
    // [END arc_cost]


    routing.addDimension(transitCallbackIndex, 0, 300,
            true, // start cumul to zero
            "Distance");

    RoutingDimension distanceDimension = routing.getMutableDimension("Distance");
    distanceDimension.setGlobalSpanCostCoefficient(100);


    // Setting first solution heuristic.
    // [START parameters]
    RoutingSearchParameters searchParameters =
            main.defaultRoutingSearchParameters()
                    .toBuilder()
                    .setFirstSolutionStrategy(FirstSolutionStrategy.Value.PATH_CHEAPEST_ARC)
                    .build();
    // [END parameters]

    // Solve the problem.
    // [START solve]
    Assignment solution = routing.solveWithParameters(searchParameters);
    // [END solve]

    // Print solution on console.
    // [START print_solution]
    printSolution(data, routing, manager, solution);
    // [END print_solution]
  }
}